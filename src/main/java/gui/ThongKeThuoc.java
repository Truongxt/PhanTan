/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import card.ModelCard;
import dao.ChiTietHoaDon_DAO;
import dao.LoaiThuoc_DAO;
import dao.Thuoc_DAO;
import entity.LoaiThuoc;
import entity.Thuoc;
import entity.ThuocVaLuotBan;
import entity.ThuocvaDoanhThu;
import java.awt.event.FocusEvent;
import java.awt.event.FocusListener;
import java.io.FileOutputStream;
import java.io.IOException;
import java.rmi.RemoteException;
import java.sql.SQLException;
import java.text.DecimalFormat;

import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JPanel;

import message.Notification;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import raven.toast.Notifications;

/**
 *
 * @author Lenovo
 */
public class ThongKeThuoc extends JPanel {

    /**
     * Creates new form ThongKeThuoc
     */
    private static Thuoc_DAO thuoc_dao;
    private static ArrayList<Thuoc> list_Thuoc;
    private static ChiTietHoaDon_DAO cthd;
    private static ThuocVaLuotBan thuocvaluotban;
    private static DefaultTableModel model = null;
    private static LoaiThuoc_DAO loaiThuoc_dao;
    private static ArrayList<LoaiThuoc> list_LoaiThuoc;

    public ThongKeThuoc() throws SQLException, RemoteException {
        initComponents();
        initCard();
        init();
        loadDataTable();
        updateLoaiThuoc();
        setupSearch();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        tf_Search = new javax.swing.JTextField();
        btn_Search = new javax.swing.JButton();
        cb_LoaiThuoc = new javax.swing.JComboBox<>();
        btn_ThuocHetHan = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jMonthChooser1 = new com.toedter.calendar.JMonthChooser();
        jButton1 = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableThuoc = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        card1 = new card.Card();
        card2 = new card.Card();

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm Kiếm\n", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        tf_Search.setText("Nhập tên thuốc");
        tf_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_SearchActionPerformed(evt);
            }
        });

        btn_Search.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nhanvien/circle.png"))); // NOI18N
        btn_Search.setText("Tìm Kiếm");
        btn_Search.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btn_SearchActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        cb_LoaiThuoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Chọn loại thuốc" }));
        cb_LoaiThuoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    cb_LoaiThuocActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        btn_ThuocHetHan.setText("Thuốc sắp hết hạn");
        btn_ThuocHetHan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    btn_ThuocHetHanActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jButton3.setText("Thuốc sắp hết trong kho");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton3ActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nhanvien/refresh.png"))); // NOI18N
        jButton2.setText("Tải lại");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton2ActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/nhanvien/logo.png"))); // NOI18N
        jButton4.setText("Xuất Excel");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                try {
                    jButton4ActionPerformed(evt);
                } catch (RemoteException e) {
                    throw new RuntimeException(e);
                }
            }
        });

        jMonthChooser1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMonthChooser1MouseClicked(evt);
            }
        });

        jButton1.setText("Cập nhật");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(tf_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btn_Search))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(cb_LoaiThuoc, 0, 154, Short.MAX_VALUE)
                            .addComponent(btn_ThuocHetHan, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(28, 28, 28)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(18, 18, 18)
                                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_Search, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jMonthChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_LoaiThuoc, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4)
                    .addComponent(btn_ThuocHetHan, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tableThuoc.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên thuốc", "Mã thuốc", "Số lượng tồn", "Hạn sử dụng", "Thuế", "Giá", "Số lượng bán", "Doanh thu"
            }
        ));
        tableThuoc.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableThuocMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tableThuoc);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1074, Short.MAX_VALUE)
                .addGap(8, 8, 8))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(card2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(card1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void tf_SearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_SearchActionPerformed

        setupSearch();


    }//GEN-LAST:event_tf_SearchActionPerformed

    private void btn_ThuocHetHanActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btn_ThuocHetHanActionPerformed
        resetTable();
        list_Thuoc = thuoc_dao.getThuocHetHan1Thang();
        updateTable(list_Thuoc);


    }//GEN-LAST:event_btn_ThuocHetHanActionPerformed

    private void btn_SearchActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_btn_SearchActionPerformed
        resetTable();
        search();
    }//GEN-LAST:event_btn_SearchActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_jButton2ActionPerformed
        resetTable();
        loadDataTable();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void cb_LoaiThuocActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_cb_LoaiThuocActionPerformed
        String tenLoai = (String) cb_LoaiThuoc.getSelectedItem();
        resetTable();
        list_Thuoc = thuoc_dao.getThuocTheoLoai(tenLoai);
        updateTable(list_Thuoc);
    }//GEN-LAST:event_cb_LoaiThuocActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_jButton3ActionPerformed
        resetTable();
        list_Thuoc = thuoc_dao.getThuocTonKhoThap();
        updateTable(list_Thuoc);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void tableThuocMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableThuocMouseClicked
        int i = tableThuoc.getSelectedRow();
        int month = jMonthChooser1.getMonth() + 1;
        String tenThuoc = (String) tableThuoc.getValueAt(i, 1);
        int luotBan = (int) tableThuoc.getValueAt(i, 6);

        String str = (String) tableThuoc.getValueAt(i, 7);
        String numberStr = str.replaceAll("[^0-9]", "");
        double doanhThu = Double.parseDouble(numberStr);
        card1.setDataNormal(new ModelCard("Lượt bán " + tenThuoc + " trong tháng " + month, luotBan, 5, null));
        card2.setData(new ModelCard("Doanh thu " + tenThuoc + " trong tháng " + month, doanhThu, 10, null));
    }//GEN-LAST:event_tableThuocMouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) throws RemoteException {//GEN-FIRST:event_jButton4ActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Lưu file Excel");
        int userSelection = fileChooser.showSaveDialog(null);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            String filePath = fileChooser.getSelectedFile().getAbsolutePath() + ".xlsx";
            xuatFileExcel(list_Thuoc, filePath);
            Notifications.getInstance().show(Notifications.Type.SUCCESS, "Xuất file Excel thành công");

        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        int month = jMonthChooser1.getMonth() + 1; // Get selected month
        int year = 2024; // Get current year
        String selectedLoaiThuoc = (String) cb_LoaiThuoc.getSelectedItem(); // Get selected drug type

        try {
            // Fetch top-selling drug and revenue for the selected month and drug type
            ThuocVaLuotBan topSellingDrug = cthd.getTop1ThuocCoLuotBanCaoNhatTrongThang(month, year);
            ThuocvaDoanhThu topRevenueDrug = cthd.getTop1ThuocCoDoanhThuCaoNhatTrongThang(month, year);

            if (topSellingDrug != null && topRevenueDrug != null) {
                // Update cards with filtered data
                card1.setDataNormal(new ModelCard(
                        "Lượt bán cao nhất " + topSellingDrug.getThuoc().getTenThuoc() + " trong tháng " + month,
                        topSellingDrug.getLuotBan(),
                        5,
                        null
                ));
                card2.setData(new ModelCard(
                        "Doanh thu cao nhất " + topRevenueDrug.getThuoc().getTenThuoc() + " trong tháng " + month,
                        topRevenueDrug.getDoanhThu(),
                        10,
                        null
                ));
            } else {
                // Handle case where no data is available
                Notifications.getInstance().show(Notifications.Type.WARNING, "Tháng " + month + " và loại thuốc \"" + selectedLoaiThuoc + "\" chưa có dữ liệu");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifications.getInstance().show(Notifications.Type.ERROR, "Lỗi khi cập nhật dữ liệu cho tháng " + month + " và loại thuốc \"" + selectedLoaiThuoc + "\"");
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMonthChooser1MouseClicked(java.awt.event.MouseEvent evt) {                                            
        int month = jMonthChooser1.getMonth() + 1; // Get selected month
        int year = java.time.Year.now().getValue(); // Get current year
        String selectedLoaiThuoc = (String) cb_LoaiThuoc.getSelectedItem(); // Get selected drug type

        try {
            // Fetch top-selling drug and revenue for the selected month and drug type
            ThuocVaLuotBan topSellingDrug = cthd.getTop1ThuocCoLuotBanCaoNhatTrongThang(month, year);
            ThuocvaDoanhThu topRevenueDrug = cthd.getTop1ThuocCoDoanhThuCaoNhatTrongThang(month, year);

            if (topSellingDrug != null && topRevenueDrug != null) {
                // Update cards with filtered data
                card1.setDataNormal(new ModelCard(
                        "Lượt bán cao nhất " + topSellingDrug.getThuoc().getTenThuoc() + " trong tháng " + month,
                        topSellingDrug.getLuotBan(),
                        5,
                        null
                ));
                card2.setData(new ModelCard(
                        "Doanh thu cao nhất " + topRevenueDrug.getThuoc().getTenThuoc() + " trong tháng " + month,
                        topRevenueDrug.getDoanhThu(),
                        10,
                        null
                ));
            } else {
                // Handle case where no data is available
                Notifications.getInstance().show(Notifications.Type.WARNING, "Tháng " + month + " và loại thuốc \"" + selectedLoaiThuoc + "\" chưa có dữ liệu");
            }
        } catch (Exception e) {
            e.printStackTrace();
            Notifications.getInstance().show(Notifications.Type.ERROR, "Lỗi khi cập nhật dữ liệu cho tháng " + month + " và loại thuốc \"" + selectedLoaiThuoc + "\"");
        }
    }                                                                                      

    private void setupSearch() {
    tf_Search.setText("Tìm kiếm thuốc"); // Default placeholder text

    tf_Search.addFocusListener(new FocusListener() {
        @Override
        public void focusGained(FocusEvent e) {
            if (tf_Search.getText().equals("Tìm kiếm thuốc")) {
                tf_Search.setText(""); // Clear placeholder text on focus
            } else {
                tf_Search.selectAll();
            }
        }

        @Override
        public void focusLost(FocusEvent e) {
            if (tf_Search.getText().trim().isEmpty()) {
                tf_Search.setText("Tìm kiếm thuốc"); // Restore placeholder text if empty
            }
        }
    });

    // Add a DocumentListener for real-time search
    tf_Search.getDocument().addDocumentListener(new javax.swing.event.DocumentListener() {
        @Override
        public void insertUpdate(javax.swing.event.DocumentEvent e) {
            try {
                performRealTimeSearch();
            } catch (RemoteException ex) {
                Logger.getLogger(ThongKeThuoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void removeUpdate(javax.swing.event.DocumentEvent e) {
            try {
                performRealTimeSearch();
            } catch (RemoteException ex) {
                Logger.getLogger(ThongKeThuoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        @Override
        public void changedUpdate(javax.swing.event.DocumentEvent e) {
            try {
                performRealTimeSearch();
            } catch (RemoteException ex) {
                Logger.getLogger(ThongKeThuoc.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    });
}
private void performRealTimeSearch() throws RemoteException {
    String query = tf_Search.getText().trim();

    // Bỏ qua placeholder hoặc chuỗi rỗng
    if (query.equals("Tìm kiếm thuốc") || query.isEmpty()) {
        resetTable();
        loadDataTable();
        return;
    }

    // Chỉ tìm kiếm nếu chuỗi dài hơn 2 ký tự để tối ưu hiệu suất
    if (query.length() < 2) {
        return;
    }

    // Làm mới danh sách và tìm kiếm
    resetTable();
    list_Thuoc = thuoc_dao.searchThuoc(query); // Gọi phương thức tìm kiếm chung

    // Cập nhật bảng
    if (list_Thuoc != null && !list_Thuoc.isEmpty()) {
        updateTable(list_Thuoc);
    } else {
        resetTable(); // Hiển thị bảng rỗng nếu không tìm thấy
    }
}

   public void search() throws RemoteException {
    String query = tf_Search.getText().trim();

    // Kiểm tra nếu là text placeholder hoặc rỗng
    if (query.equals("Tìm kiếm thuốc") || query.isEmpty()) {
        Notifications.getInstance().show(Notifications.Type.WARNING, "Vui lòng nhập từ khóa tìm kiếm");
        resetTable();
        loadDataTable();
        return;
    }

    // Làm mới danh sách thuốc
    resetTable();

    // Tìm kiếm thuốc theo mã hoặc tên
    list_Thuoc = thuoc_dao.searchThuoc(query); // Giả sử có phương thức searchThuoc trong Thuoc_DAO

    // Cập nhật bảng và hiển thị thông báo
    if (list_Thuoc != null && !list_Thuoc.isEmpty()) {
        updateTable(list_Thuoc);
        Notifications.getInstance().show(Notifications.Type.SUCCESS, "Đã tìm thấy " + list_Thuoc.size() + " kết quả");
    } else {
        Notifications.getInstance().show(Notifications.Type.WARNING, "Không tìm thấy thuốc với từ khóa: " + query);
        resetTable();
    }
}

    public void initCard() {
        card1.setColorGradient(new java.awt.Color(211, 28, 215));
        card2.setBackground(new java.awt.Color(10, 30, 214));
        card2.setColorGradient(new java.awt.Color(72, 111, 252));
        //card3.setBackground(new java.awt.Color(194, 85, 1));
        // card3.setColorGradient(new java.awt.Color(255, 212, 99));
    }

    public void init() throws RemoteException {
        thuoc_dao = new Thuoc_DAO();
        cthd = new ChiTietHoaDon_DAO();
        model = (DefaultTableModel) tableThuoc.getModel();
        list_Thuoc = new ArrayList<>();
        loaiThuoc_dao = new LoaiThuoc_DAO();
        list_LoaiThuoc = new ArrayList<>();
    }

    public void loadDataTable() throws RemoteException {
        int month = jMonthChooser1.getMonth() + 1;
        //ArrayList<ThuocVaLuotBan> thuocVaLuotBan= new ArrayList<>();
        //thuocVaLuotBan = cthd.getThuocCoLuotBanCaoNhatTrongThang(1, 2024);
        list_Thuoc = thuoc_dao.getAllThuoc();
        updateTable(list_Thuoc);

        try {
            ThuocVaLuotBan thuoc = cthd.getTop1ThuocCoLuotBanCaoNhatTrongThang(month, 2024);
            ThuocvaDoanhThu thuocvaDoanhThu = cthd.getTop1ThuocCoDoanhThuCaoNhatTrongThang(month, 2024);
            card1.setDataNormal(new ModelCard("Lượt bán cao nhất \n" + thuoc.getThuoc().getTenThuoc(), thuoc.getLuotBan(), PROPERTIES, null));
            card2.setDataNormal(new ModelCard("Doanh thu cao nhất " + thuocvaDoanhThu.getThuoc().getTenThuoc(), thuocvaDoanhThu.getDoanhThu(), PROPERTIES, null));
        } catch (Exception e) {
            Notifications.getInstance().show(Notifications.Type.WARNING, "Tháng " + month + " chưa có dữ liệu");

        }

    }

    public void updateTable(ArrayList<Thuoc> arr) throws RemoteException {
        DecimalFormat df = new DecimalFormat("#,##0.##");

        // Xóa hết các dòng trong bảng
        model.setRowCount(0);

        // Kiểm tra số cột trong bảng trước khi thêm
        int columnCount = model.getColumnCount();
        if (columnCount == 0) {
            System.out.println("Bảng chưa có cột, vui lòng kiểm tra lại việc khởi tạo bảng.");
            return;  // Nếu bảng chưa có cột, dừng lại để tránh lỗi.
        }

        // Duyệt qua danh sách thuốc và thêm vào bảng
        for (Thuoc thuoc : arr) {
            if (thuoc != null) {
                // Tạo mảng cho mỗi dòng
                Object[] row = {
                    thuoc.getMaThuoc(),
                    thuoc.getTenThuoc(),
                    thuoc.getSoLuongTon(),
                    thuoc.getHsd(),
                    thuoc.getThue(),
                    df.format(thuoc.getGia()) + " VND",
                    cthd.getsoLuongBan(thuoc.getMaThuoc()),
                    df.format(cthd.getDoanhThu(thuoc.getMaThuoc())) + " VND"
                };

                // Ensure the row length matches the column count before adding
                if (row.length == columnCount) {
                    model.addRow(row);  // Thêm dòng vào bảng nếu số cột khớp
                } else {
                    System.out.println("Số cột không khớp: row.length = " + row.length + ", columnCount = " + columnCount);
                }
            }
        }
    }

    public void updateLoaiThuoc() {
        // Cập nhật loại thuốc vào combobox
        list_LoaiThuoc = loaiThuoc_dao.getAllLoaiThuoc();
        //cb_LoaiThuoc.removeAllItems();  // Xóa các mục cũ
        for (LoaiThuoc loaiThuoc : list_LoaiThuoc) {
            cb_LoaiThuoc.addItem(loaiThuoc.getTenLoai());
        }
    }

    public void resetTable() {

        model.setRowCount(0);
        //tableThuoc.removeAll();
        list_Thuoc.clear();
        System.out.println("Số dòng trong bảng: " + model.getRowCount());
        System.out.println("Số cột trong bảng: " + model.getColumnCount());
        model = new DefaultTableModel(new Object[]{"Mã thuốc", "Tên thuốc", "Số lượng tồn", "HSD", "Thuế", "Giá", "Số lượng bán", "Doanh thu"}, 0);
        tableThuoc.setModel(model);

    }

    public static void xuatFileExcel(ArrayList<Thuoc> listThuoc, String filePath) throws RemoteException {
        Workbook workbook = new XSSFWorkbook();
        Sheet sheet = workbook.createSheet("Thong Ke Thuoc");

        // Tạo tiêu đề
        Row titleRow = sheet.createRow(0);
        Cell titleCell = titleRow.createCell(0);
        titleCell.setCellValue("Thống kê thuốc");
        sheet.addMergedRegion(new CellRangeAddress(0, 0, 0, 7));

        CellStyle titleStyle = workbook.createCellStyle();
        Font titleFont = workbook.createFont();
        titleFont.setFontHeightInPoints((short) 16);
        titleFont.setBold(true);
        titleStyle.setFont(titleFont);
        titleCell.setCellStyle(titleStyle);

        // Thêm dòng ngày in
        Row dateRow = sheet.createRow(1);
        Cell dateCell = dateRow.createCell(0);
        dateCell.setCellValue("Ngày in: " + new java.util.Date());

        // Tạo dòng tiêu đề cột
        Row headerRow = sheet.createRow(2);
        String[] headers = {"Mã thuốc", "Tên thuốc", "Số lượng tồn", "Hạn sử dụng", "Thuế", "Giá", "Số lượng bán", "Doanh thu"};
        for (int i = 0; i < headers.length; i++) {
            Cell cell = headerRow.createCell(i);
            cell.setCellValue(headers[i]);
        }

        // Thêm dữ liệu
        int rowNum = 3;
        for (Thuoc thuoc : listThuoc) {
            Row row = sheet.createRow(rowNum++);
            row.createCell(0).setCellValue(thuoc.getMaThuoc());
            row.createCell(1).setCellValue(thuoc.getTenThuoc());
            row.createCell(2).setCellValue(thuoc.getSoLuongTon());
            row.createCell(3).setCellValue(thuoc.getHsd().toString());
            row.createCell(4).setCellValue(thuoc.getThue());
            row.createCell(5).setCellValue(thuoc.getGia());
            row.createCell(6).setCellValue(cthd.getsoLuongBan(thuoc.getMaThuoc()));
            row.createCell(7).setCellValue(cthd.getDoanhThu(thuoc.getMaThuoc()));
        }

        // Ghi file
        try (FileOutputStream outputStream = new FileOutputStream(filePath)) {
            workbook.write(outputStream);
            workbook.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) throws SQLException, RemoteException {
        JFrame frame = new JFrame("Thong Ke Thuoc");

        frame.setSize(800, 600);
        frame.add(new ThongKeThuoc());
        frame.setVisible(true);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_Search;
    private javax.swing.JButton btn_ThuocHetHan;
    private card.Card card1;
    private card.Card card2;
    private javax.swing.JComboBox<String> cb_LoaiThuoc;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private com.toedter.calendar.JMonthChooser jMonthChooser1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tableThuoc;
    private javax.swing.JTextField tf_Search;
    // End of variables declaration//GEN-END:variables
}
